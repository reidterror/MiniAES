/**
 * <h1>Contains nibble substitution table and mix column MULtiplication table.</h1>
 *
 *  @author Team Caligula
 *  @version 1.0
 *  @since   02.04.2019
 */

package miniaesdemo;

import java.util.HashMap;
import java.util.Map;

class Tables {
   /**
     * <h1>The following tables are for:</h1>
     * <ol>
     *     <il>Nibble Substitution Table</il>
     *     <il>MixColumns Multiplication Table</il>
     * </ol>
     */
    
    /**
     *
     */
    // Creating a constant HashMap object for the nibble substitution table.
    private static final HashMap<Integer, Integer> NIBBLE_SUB_TABLE;
    private static final HashMap<Integer, Integer> S_BOX_TABLE;
    
    /**
     *
     */
    // Creating a constant 2 dimensional integer array for the mixcolumns MULtiplication table.
    private static final int[][] MULTIPLICATION_TABLE;
    private static final int[] MUL2, MUL3, MUL9, MUL11, MUL13, MUL14;

    /**
     *
     */
    //Constructor for the table class.
    static {

        // Initializing the HashMap object.
        NIBBLE_SUB_TABLE = new HashMap<>();
        NIBBLE_SUB_TABLE.put(0, 14);
        NIBBLE_SUB_TABLE.put(1, 4);
        NIBBLE_SUB_TABLE.put(2, 13);
        NIBBLE_SUB_TABLE.put(3, 1);
        NIBBLE_SUB_TABLE.put(4, 2);
        NIBBLE_SUB_TABLE.put(5, 15);
        NIBBLE_SUB_TABLE.put(6, 11);
        NIBBLE_SUB_TABLE.put(7, 8);
        NIBBLE_SUB_TABLE.put(8, 3);
        NIBBLE_SUB_TABLE.put(9, 10);
        NIBBLE_SUB_TABLE.put(10, 6);
        NIBBLE_SUB_TABLE.put(11, 12);
        NIBBLE_SUB_TABLE.put(12, 5);
        NIBBLE_SUB_TABLE.put(13, 9);
        NIBBLE_SUB_TABLE.put(14, 0);
        NIBBLE_SUB_TABLE.put(15, 7);
        
        S_BOX_TABLE = new HashMap<>();

        S_BOX_TABLE.put(0x00, 99);
        S_BOX_TABLE.put(0x01, 124);
        S_BOX_TABLE.put(0x02, 119);
        S_BOX_TABLE.put(0x03, 123);
        S_BOX_TABLE.put(0x04, 241);
        S_BOX_TABLE.put(0x05, 107);
        S_BOX_TABLE.put(0x06, 111);
        S_BOX_TABLE.put(0x07, 197);
        S_BOX_TABLE.put(0x08, 48);
        S_BOX_TABLE.put(0x09, 1);
        S_BOX_TABLE.put(0x0a, 103);
        S_BOX_TABLE.put(0x0b, 43);
        S_BOX_TABLE.put(0x0c, 254);
        S_BOX_TABLE.put(0x0d, 215);
        S_BOX_TABLE.put(0x0e, 171);
        S_BOX_TABLE.put(0x0f, 118);

        S_BOX_TABLE.put(0x10, 202);
        S_BOX_TABLE.put(0x11, 130);
        S_BOX_TABLE.put(0x12, 201);
        S_BOX_TABLE.put(0x13, 125);
        S_BOX_TABLE.put(0x14, 250);
        S_BOX_TABLE.put(0x15, 89);
        S_BOX_TABLE.put(0x16, 71);
        S_BOX_TABLE.put(0x17, 240);
        S_BOX_TABLE.put(0x18, 173);
        S_BOX_TABLE.put(0x19, 212);
        S_BOX_TABLE.put(0x1a, 162);
        S_BOX_TABLE.put(0x1b, 175);
        S_BOX_TABLE.put(0x1c, 156);
        S_BOX_TABLE.put(0x1d, 164);
        S_BOX_TABLE.put(0x1e, 114);
        S_BOX_TABLE.put(0x1f, 192);

        S_BOX_TABLE.put(0x20, 183); 
        S_BOX_TABLE.put(0x21, 253);
        S_BOX_TABLE.put(0x22, 147);
        S_BOX_TABLE.put(0x23, 38);
        S_BOX_TABLE.put(0x24, 54);
        S_BOX_TABLE.put(0x25, 63);
        S_BOX_TABLE.put(0x26, 247);
        S_BOX_TABLE.put(0x27, 204);
        S_BOX_TABLE.put(0x28, 52);
        S_BOX_TABLE.put(0x29, 165);
        S_BOX_TABLE.put(0x2a, 229);
        S_BOX_TABLE.put(0x2b, 241);
        S_BOX_TABLE.put(0x2c, 113);
        S_BOX_TABLE.put(0x2d, 216);
        S_BOX_TABLE.put(0x2e, 49);
        S_BOX_TABLE.put(0x2f, 21);

        S_BOX_TABLE.put(0x30, 4);
        S_BOX_TABLE.put(0x31, 199);
        S_BOX_TABLE.put(0x32, 35);
        S_BOX_TABLE.put(0x33, 195);
        S_BOX_TABLE.put(0x34, 24);
        S_BOX_TABLE.put(0x35, 150);
        S_BOX_TABLE.put(0x36, 5);
        S_BOX_TABLE.put(0x37, 154);
        S_BOX_TABLE.put(0x38, 7);
        S_BOX_TABLE.put(0x39, 18);
        S_BOX_TABLE.put(0x3a, 128);
        S_BOX_TABLE.put(0x3b, 226);
        S_BOX_TABLE.put(0x3c, 235);
        S_BOX_TABLE.put(0x3d, 39);
        S_BOX_TABLE.put(0x3e, 178);
        S_BOX_TABLE.put(0x3f, 117);

        S_BOX_TABLE.put(0x40, 9);
        S_BOX_TABLE.put(0x41, 131);
        S_BOX_TABLE.put(0x42, 44);
        S_BOX_TABLE.put(0x43, 26);
        S_BOX_TABLE.put(0x44, 27);
        S_BOX_TABLE.put(0x45, 110);
        S_BOX_TABLE.put(0x46, 90);
        S_BOX_TABLE.put(0x47, 160);
        S_BOX_TABLE.put(0x48, 82);
        S_BOX_TABLE.put(0x49, 59);
        S_BOX_TABLE.put(0x4a, 214);
        S_BOX_TABLE.put(0x4b, 179);
        S_BOX_TABLE.put(0x4c, 41);
        S_BOX_TABLE.put(0x4d, 227);
        S_BOX_TABLE.put(0x4e, 47);
        S_BOX_TABLE.put(0x4f, 132);

        S_BOX_TABLE.put(0x50, 83);
        S_BOX_TABLE.put(0x51, 209);
        S_BOX_TABLE.put(0x52, 0);
        S_BOX_TABLE.put(0x53, 237);
        S_BOX_TABLE.put(0x54, 32);
        S_BOX_TABLE.put(0x55, 252);
        S_BOX_TABLE.put(0x56, 177);
        S_BOX_TABLE.put(0x57, 91);
        S_BOX_TABLE.put(0x58, 106);
        S_BOX_TABLE.put(0x59, 203);
        S_BOX_TABLE.put(0x5a, 190);
        S_BOX_TABLE.put(0x5b, 57);
        S_BOX_TABLE.put(0x5c, 74);
        S_BOX_TABLE.put(0x5d, 76);
        S_BOX_TABLE.put(0x5e, 88);
        S_BOX_TABLE.put(0x5f, 207);

        S_BOX_TABLE.put(0x60, 208);
        S_BOX_TABLE.put(0x61, 239);
        S_BOX_TABLE.put(0x62, 170);
        S_BOX_TABLE.put(0x63, 251);
        S_BOX_TABLE.put(0x64, 67);
        S_BOX_TABLE.put(0x65, 77);
        S_BOX_TABLE.put(0x66, 51);
        S_BOX_TABLE.put(0x67, 133);
        S_BOX_TABLE.put(0x68, 69);
        S_BOX_TABLE.put(0x69, 249);
        S_BOX_TABLE.put(0x6a, 2);
        S_BOX_TABLE.put(0x6b, 127);
        S_BOX_TABLE.put(0x6c, 80);
        S_BOX_TABLE.put(0x6d, 60);
        S_BOX_TABLE.put(0x6e, 159);
        S_BOX_TABLE.put(0x6f, 168);

        S_BOX_TABLE.put(0x70, 81);
        S_BOX_TABLE.put(0x71, 163);
        S_BOX_TABLE.put(0x72, 64);
        S_BOX_TABLE.put(0x73, 143);
        S_BOX_TABLE.put(0x74, 146);
        S_BOX_TABLE.put(0x75, 157);
        S_BOX_TABLE.put(0x76, 56);
        S_BOX_TABLE.put(0x77, 245);
        S_BOX_TABLE.put(0x78, 188);
        S_BOX_TABLE.put(0x79, 182);
        S_BOX_TABLE.put(0x7a, 218);
        S_BOX_TABLE.put(0x7b, 33);
        S_BOX_TABLE.put(0x7c, 16);
        S_BOX_TABLE.put(0x7d, 255);
        S_BOX_TABLE.put(0x7e, 243);
        S_BOX_TABLE.put(0x7f, 210);

        S_BOX_TABLE.put(0x80, 205);
        S_BOX_TABLE.put(0x81, 12);
        S_BOX_TABLE.put(0x82, 19);
        S_BOX_TABLE.put(0x83, 236);
        S_BOX_TABLE.put(0x84, 95);
        S_BOX_TABLE.put(0x85, 151);
        S_BOX_TABLE.put(0x86, 68);
        S_BOX_TABLE.put(0x87, 23);
        S_BOX_TABLE.put(0x88, 196);
        S_BOX_TABLE.put(0x89, 167);
        S_BOX_TABLE.put(0x8a, 126);
        S_BOX_TABLE.put(0x8b, 61);
        S_BOX_TABLE.put(0x8c, 100);
        S_BOX_TABLE.put(0x8d, 93);
        S_BOX_TABLE.put(0x8e, 25);
        S_BOX_TABLE.put(0x8f, 115);

        S_BOX_TABLE.put(0x90, 96);
        S_BOX_TABLE.put(0x91, 129);
        S_BOX_TABLE.put(0x92, 79);
        S_BOX_TABLE.put(0x93, 220);
        S_BOX_TABLE.put(0x94, 34);
        S_BOX_TABLE.put(0x95, 42);
        S_BOX_TABLE.put(0x96, 144);
        S_BOX_TABLE.put(0x97, 136);
        S_BOX_TABLE.put(0x98, 70);
        S_BOX_TABLE.put(0x99, 238);
        S_BOX_TABLE.put(0x9a, 184);
        S_BOX_TABLE.put(0x9b, 20);
        S_BOX_TABLE.put(0x9c, 222);
        S_BOX_TABLE.put(0x9d, 94);
        S_BOX_TABLE.put(0x9e, 11);
        S_BOX_TABLE.put(0x9f, 219);

        S_BOX_TABLE.put(0xa0, 224);
        S_BOX_TABLE.put(0xa1, 50);
        S_BOX_TABLE.put(0xa2, 58);
        S_BOX_TABLE.put(0xa3, 10);
        S_BOX_TABLE.put(0xa4, 73);
        S_BOX_TABLE.put(0xa5, 6);
        S_BOX_TABLE.put(0xa6, 36);
        S_BOX_TABLE.put(0xa7, 92);
        S_BOX_TABLE.put(0xa8, 194);
        S_BOX_TABLE.put(0xa9, 211);
        S_BOX_TABLE.put(0xaa, 172);
        S_BOX_TABLE.put(0xab, 98);
        S_BOX_TABLE.put(0xac, 145);
        S_BOX_TABLE.put(0xad, 149);
        S_BOX_TABLE.put(0xae, 228);
        S_BOX_TABLE.put(0xaf, 121);

        S_BOX_TABLE.put(0xb0, 231);
        S_BOX_TABLE.put(0xb1, 200);
        S_BOX_TABLE.put(0xb2, 55);
        S_BOX_TABLE.put(0xb3, 109);
        S_BOX_TABLE.put(0xb4, 141);
        S_BOX_TABLE.put(0xb5, 213);
        S_BOX_TABLE.put(0xb6, 78);
        S_BOX_TABLE.put(0xb7, 169);
        S_BOX_TABLE.put(0xb8, 108);
        S_BOX_TABLE.put(0xb9, 86);
        S_BOX_TABLE.put(0xba, 244);
        S_BOX_TABLE.put(0xbb, 234);
        S_BOX_TABLE.put(0xbc, 101);
        S_BOX_TABLE.put(0xbd, 122);
        S_BOX_TABLE.put(0xbe, 174);
        S_BOX_TABLE.put(0xbf, 8);

        S_BOX_TABLE.put(0xc0, 186);
        S_BOX_TABLE.put(0xc1, 120);
        S_BOX_TABLE.put(0xc2, 37);
        S_BOX_TABLE.put(0xc3, 46);
        S_BOX_TABLE.put(0xc4, 28);
        S_BOX_TABLE.put(0xc5, 166);
        S_BOX_TABLE.put(0xc6, 180);
        S_BOX_TABLE.put(0xc7, 198);
        S_BOX_TABLE.put(0xc8, 232);
        S_BOX_TABLE.put(0xc9, 221);
        S_BOX_TABLE.put(0xca, 116);
        S_BOX_TABLE.put(0xcb, 31);
        S_BOX_TABLE.put(0xcc, 75);
        S_BOX_TABLE.put(0xcd, 189);
        S_BOX_TABLE.put(0xce, 139);
        S_BOX_TABLE.put(0xcf, 138);

        S_BOX_TABLE.put(0xd0, 112);
        S_BOX_TABLE.put(0xd1, 62);
        S_BOX_TABLE.put(0xd2, 181);
        S_BOX_TABLE.put(0xd3, 102);
        S_BOX_TABLE.put(0xd4, 72);
        S_BOX_TABLE.put(0xd5, 3);
        S_BOX_TABLE.put(0xd6, 246);
        S_BOX_TABLE.put(0xd7, 14);
        S_BOX_TABLE.put(0xd8, 97);
        S_BOX_TABLE.put(0xd9, 53);
        S_BOX_TABLE.put(0xda, 87);
        S_BOX_TABLE.put(0xdb, 185);
        S_BOX_TABLE.put(0xdc, 134);
        S_BOX_TABLE.put(0xdd, 193);
        S_BOX_TABLE.put(0xde, 29);
        S_BOX_TABLE.put(0xdf, 158);

        S_BOX_TABLE.put(0xe0, 225);
        S_BOX_TABLE.put(0xe1, 248);
        S_BOX_TABLE.put(0xe2, 152);
        S_BOX_TABLE.put(0xe3, 17);
        S_BOX_TABLE.put(0xe4, 105);
        S_BOX_TABLE.put(0xe5, 217);
        S_BOX_TABLE.put(0xe6, 142);
        S_BOX_TABLE.put(0xe7, 148);
        S_BOX_TABLE.put(0xe8, 155);
        S_BOX_TABLE.put(0xe9, 30);
        S_BOX_TABLE.put(0xea, 135);
        S_BOX_TABLE.put(0xeb, 233);
        S_BOX_TABLE.put(0xec, 206);
        S_BOX_TABLE.put(0xed, 85);
        S_BOX_TABLE.put(0xee, 40);
        S_BOX_TABLE.put(0xef, 223);

        S_BOX_TABLE.put(0xf0, 140);
        S_BOX_TABLE.put(0xf1, 161);
        S_BOX_TABLE.put(0xf2, 137);
        S_BOX_TABLE.put(0xf3, 13);
        S_BOX_TABLE.put(0xf4, 191);
        S_BOX_TABLE.put(0xf5, 230);
        S_BOX_TABLE.put(0xf6, 66);
        S_BOX_TABLE.put(0xf7, 104);
        S_BOX_TABLE.put(0xf8, 65);
        S_BOX_TABLE.put(0xf9, 153);
        S_BOX_TABLE.put(0xfa, 45);
        S_BOX_TABLE.put(0xfb, 15);
        S_BOX_TABLE.put(0xfc, 176);
        S_BOX_TABLE.put(0xfd, 84);
        S_BOX_TABLE.put(0xfe, 187);
        S_BOX_TABLE.put(0xff, 22);

        // Initializing the 2D array.
        MULTIPLICATION_TABLE = new int[][]{
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
                {0, 2, 4, 6, 8, 10, 12, 14, 3, 1, 7, 5, 11, 9, 15, 13},
                {0, 3, 6, 5, 12, 15, 10, 9, 11, 8, 13, 14, 7, 4, 1, 2},
                {0, 4, 8, 12, 3, 7, 11, 15, 6, 2, 14, 10, 5, 1, 13, 9},
                {0, 5, 10, 15, 7, 2, 13, 8, 14, 11, 4, 1, 9, 12, 3, 6},
                {0, 6, 12, 10, 11, 13, 7, 1, 5, 3, 9, 15, 14, 8, 2, 4},
                {0, 7, 14, 9, 15, 8, 1, 6, 13, 10, 3, 4, 2, 5, 12, 11},
                {0, 8, 3, 11, 6, 14, 5, 13, 12, 4, 15, 7, 10, 2, 9, 1},
                {0, 9, 1, 8, 2, 11, 3, 10, 4, 13, 5, 12, 6, 15, 7, 14},
                {0, 10, 7, 13, 14, 4, 9, 3, 15, 5, 8, 2, 1, 11, 6, 12},
                {0, 11, 5, 14, 10, 1, 15, 4, 7, 12, 2, 9, 13, 6, 8, 3},
                {0, 12, 11, 7, 5, 9, 14, 2, 10, 6, 1, 13, 15, 3, 4, 8},
                {0, 13, 9, 4, 1, 12, 8, 5, 2, 15, 11, 6, 3, 14, 10, 7},
                {0, 14, 15, 1, 13, 3, 2, 12, 9, 7, 6, 8, 4, 10, 11, 5},
                {0, 15, 13, 2, 9, 6, 4, 8, 1, 14, 12, 3, 8, 7, 5, 10}
        };
        
        MUL2 = new int[] {
            0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
            0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
            0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
            0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
            0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
            0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
            0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
            0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
            0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
            0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
            0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
            0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
            0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
            0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
            0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
            0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
        };

        MUL3 = new int[] { 
            0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
            0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
            0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
            0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
            0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
            0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
            0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
            0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
            0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
            0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
            0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
            0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
            0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
            0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
            0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
            0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
        };
        
        MUL9 = new int[] {
            0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
            0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
            0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
            0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
            0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
            0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
            0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
            0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
            0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
            0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
            0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
            0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
            0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
            0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
            0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
            0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
        };

        MUL11 = new int[] {
            0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
            0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
            0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
            0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
            0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
            0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
            0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
            0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
            0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
            0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
            0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
            0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
            0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
            0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
            0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
            0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
        };

        MUL13 = new int[] { 
            0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
            0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
            0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
            0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
            0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
            0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
            0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
            0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
            0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
            0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
            0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
            0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
            0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
            0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
            0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
            0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
        };

        MUL14 = new int[] {
            0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
            0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
            0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
            0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
            0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
            0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
            0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
            0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
            0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
            0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
            0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
            0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
            0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
            0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
            0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
            0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
        };
    }
   
    //Getter Methods for the NibbleSubTable and MixColumnsTable

    /**
     * <h2>Getter Method for the Values in the NibbleSub Table</h2>
     * 
     * <p>This method takes a value and using a nibble substitution table, returns
     * the substituted value.</p>
     * 
     * @param value A value to be substituted.
     * @return Returns the result of the substitution.
     */
    public static int getNibbleSubValue(int value) {

        return NIBBLE_SUB_TABLE.get(value);
    }
    
    /**
     * <h2>Getter method for the values in the inverse NibbleSub table </h2>
     * 
     * <p>This method takes a value and using a nibble substitution table, returns
     * the inverted substituted value.</p>
     * 
     * @param value A value to be substituted
     * @return Returns the result of the inverted substitution.
     */
    public static int getInverseNibbleSubValue(int value) {
        // Loop to iterate through the HashMap
        // to create an Inverse NibbleSub for the Decryption
        for (Map.Entry<Integer, Integer> entry : NIBBLE_SUB_TABLE.entrySet()) {
            if (entry.getValue().equals(value)) {
                return entry.getKey();
            }
        }
        //End of Loop

        return 0;
    }
    
    public static int getSBoxValue(int value) {
        return S_BOX_TABLE.get(value);
    }

    public static int getInverseSBoxValue(int value) {
        
        for (Map.Entry<Integer, Integer> entry : S_BOX_TABLE.entrySet()) {
            if (entry.getValue().equals(value)) {
                return entry.getKey();
            }
        }
        //End of Loop

        return 0;
    }
    
    /**
     * <h2>Getter Method for the Values in the MixColumns Table</h2>
     * 
     * <p>This method siMULates a MixColumn MULtiplication using the MixColumn 
     * MULtiplication table to generate results</p>
     * 
     * @param row The first argument of MixColumn MULtiplication.
     * @param column The second argument of MixColumn MULtiplication.
     * @return Returns the result of the MixColumn MULtiplication.
     */
    public static int getMixColumnValue(int row, int column) {

        return MULTIPLICATION_TABLE[row][column];
    }

    public static int getMUL2Value(int value) {
        return MUL2[(value%0x10)+(value/0x10)];
    }
    
    public static int getMUL3Value(int value) {
        return MUL3[(value%0x10)+(value/0x10)];
    }
    
    public static int getMUL9Value(int value) {
        return MUL9[(value%0x10)+(value/0x10)];
    }
    
    public static int getMUL11Value(int value) {
        return MUL11[(value%0x10)+(value/0x10)];
    }
    
    public static int getMUL13Value(int value) {
        return MUL13[(value%0x10)+(value/0x10)];
    }
    
    public static int getMUL14Value(int value) {
        return MUL14[(value%0x10)+(value/0x10)];
    }
}